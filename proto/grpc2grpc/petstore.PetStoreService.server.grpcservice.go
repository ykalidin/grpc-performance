// This file registers with grpc service. This file was auto-generated by mashling at
// 2019-05-08 12:27:36.295681002 +0530 IST m=+0.020861460
package grpc2grpc

import (
	"errors"
	"log"

	servInfo "github.com/project-flogo/grpc/trigger"
	"google.golang.org/grpc"
)

type serviceImplpetstorePetStoreServiceserver struct {
	trigger     *servInfo.Trigger
	serviceInfo *servInfo.ServiceInfo
}

var serviceInfopetstorePetStoreServiceserver = &servInfo.ServiceInfo{
	ProtoName:   "petstore",
	ServiceName: "PetStoreService",
}

func init() {
	servInfo.ServiceRegistery.RegisterServerService(&serviceImplpetstorePetStoreServiceserver{serviceInfo: serviceInfopetstorePetStoreServiceserver})
}

// RunRegisterServerService registers server method implimentaion with grpc
func (s *serviceImplpetstorePetStoreServiceserver) RunRegisterServerService(serv *grpc.Server, trigger *servInfo.Trigger) {
	service := &serviceImplpetstorePetStoreServiceserver{
		trigger:     trigger,
		serviceInfo: serviceInfopetstorePetStoreServiceserver,
	}
	RegisterPetStoreServiceServer(serv, service)
}

func (s *serviceImplpetstorePetStoreServiceserver) BulkUsers(bdReq PetStoreService_BulkUsersServer) error {

	methodName := "BulkUsers"

	grpcData := make(map[string]interface{})
	grpcData["methodName"] = methodName
	grpcData["strmReq"] = bdReq

	_, data, err := s.trigger.CallHandler(grpcData)

	if err != nil {
		log.Println("error: ", err)
		return err
	}

	if data != nil && data.(map[string]interface{})["error"] != nil {
		log.Println("error from end server: ", data.(map[string]interface{})["error"])
		return errors.New(data.(map[string]interface{})["error"].(string))
	}
	return nil
}

func (s *serviceImplpetstorePetStoreServiceserver) ServiceInfo() *servInfo.ServiceInfo {
	return s.serviceInfo
}
